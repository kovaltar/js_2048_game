{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ class $a5fd07fa01589658$var$Game {\n    /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */ #gameStatus = \"idle\";\n    #movingIndikator = [];\n    #score = 0;\n    constructor(initialState){\n        // eslint-disable-next-line no-console\n        this.initialState = initialState || [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.state = JSON.parse(JSON.stringify(this.initialState));\n    }\n    moveLeft() {\n        for(let i = 0; i < this.state.length; i++){\n            const curRow = this.state[i];\n            const arr = this.#mergeBackward(this.#groupCells(curRow));\n            let currentMove = false;\n            currentMove = !this.#isArraysEqual(curRow, arr);\n            this.#movingIndikator.push(currentMove);\n            if (currentMove) for(let j = 0; j < arr.length; j++)curRow[j] = arr[j];\n        }\n        if (this.#movingIndikator.includes(true)) {\n            this.#setValue(this.state);\n            this.#movingIndikator.length = 0;\n        }\n        this.#updateStatus();\n    }\n    moveRight() {\n        for(let i = 0; i < this.state.length; i++){\n            const curRow = this.state[i];\n            const arr = this.#mergeForward(this.#groupCells(curRow));\n            let currentMove = false;\n            currentMove = !this.#isArraysEqual(curRow, arr);\n            this.#movingIndikator.push(currentMove);\n            if (currentMove) for(let j = 0; j < arr.length; j++)curRow[j] = arr[j];\n        }\n        if (this.#movingIndikator.includes(true)) {\n            this.#setValue(this.state);\n            this.#movingIndikator.length = 0;\n        }\n        this.#updateStatus();\n    }\n    moveUp() {\n        for(let i = 0; i < this.state.length; i++){\n            const curColumn = this.#getColumn(this.state, i);\n            const arr = this.#mergeBackward(this.#groupCells(curColumn));\n            let currentMove = false;\n            currentMove = !this.#isArraysEqual(curColumn, arr);\n            this.#movingIndikator.push(currentMove);\n            if (currentMove) for(let j = 0; j < arr.length; j++)this.state[j][i] = arr[j];\n        }\n        if (this.#movingIndikator.includes(true)) {\n            this.#setValue(this.state);\n            this.#movingIndikator.length = 0;\n        }\n        this.#updateStatus();\n    }\n    moveDown() {\n        for(let i = 0; i < this.state.length; i++){\n            const curColumn = this.#getColumn(this.state, i);\n            const arr = this.#mergeForward(this.#groupCells(curColumn));\n            let currentMove = false;\n            currentMove = !this.#isArraysEqual(curColumn, arr);\n            this.#movingIndikator.push(currentMove);\n            if (currentMove) for(let j = 0; j < arr.length; j++)this.state[j][i] = arr[j];\n        }\n        if (this.#movingIndikator.includes(true)) {\n            this.#setValue(this.state);\n            this.#movingIndikator.length = 0;\n        }\n        this.#updateStatus();\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.#score;\n    }\n    /**\n   * @returns {number[][]}\n   */ getState() {\n        return this.state;\n    }\n    /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ getStatus() {\n        return this.#gameStatus;\n    }\n    /**\n   * Starts the game.\n   */ start() {\n        this.#updateStatus();\n        this.#setValue(this.state);\n        this.#setValue(this.state);\n    }\n    /**\n   * Resets the game.\n   */ restart() {\n        this.#gameStatus = \"idle\";\n        this.state = JSON.parse(JSON.stringify(this.initialState));\n        this.#score = 0;\n    }\n    // Add your own methods here\n    #getFlatEmptyIndexes(field) {\n        const result = [];\n        field.flat().forEach((item, ind, arr)=>{\n            if (item === 0) result.push(ind);\n        });\n        return result;\n    }\n    #chooseEmptyRandCoords(field) {\n        const emptyFlatIndexes = this.#getFlatEmptyIndexes(field);\n        if (emptyFlatIndexes.length) {\n            const randInd = Math.floor(Math.random() * emptyFlatIndexes.length);\n            const randItem = emptyFlatIndexes[randInd];\n            return [\n                Math.floor(randItem / 4),\n                randItem % 4\n            ];\n        }\n    }\n    #setValue(field) {\n        this.#updateStatus();\n        if (this.#gameStatus === \"idle\" || this.#gameStatus === \"playing\") {\n            const coords = this.#chooseEmptyRandCoords(field);\n            const randNum = Math.floor(1 + Math.random() * 10);\n            if (randNum === 1) field[coords[0]][coords[1]] = 4;\n            else field[coords[0]][coords[1]] = 2;\n        }\n    }\n    #groupCells(array) {\n        return array.filter((item, ind, arr)=>item !== 0);\n    }\n    #getColumn(rowsArr, columnInd) {\n        const column = [];\n        for(let i = 0; i < rowsArr.length; i++)column.push(rowsArr[i][columnInd]);\n        return column;\n    }\n    #mergeForward(array) {\n        const arr = array.concat();\n        const result = [];\n        for(let i = arr.length - 1; i >= 0; i--){\n            if (arr[i] === arr[i - 1]) {\n                arr[i] *= 2;\n                this.#score += arr[i];\n                result.push(arr[i]);\n                arr.splice(arr.length - 2, 2);\n            } else result.push(arr.splice(i, 1)[0]);\n            i = arr.length;\n        }\n        if (result.length < 4) for(let j = result.length; j < 4; j++)result.push(0);\n        result.reverse();\n        return result;\n    }\n    #mergeBackward(array) {\n        const arr = array.concat();\n        const result = [];\n        for(let i = 0; i < arr.length; i++){\n            if (arr[i] === arr[i + 1]) {\n                arr[i] *= 2;\n                this.#score += arr[i];\n                result.push(arr[i]);\n                arr.splice(0, i + 2);\n            } else result.push(arr.splice(0, 1)[0]);\n            i -= 1;\n        }\n        if (result.length < 4) for(let j = result.length; j < 4; j++)result.push(0);\n        return result;\n    }\n    #isArraysEqual(arr1, arr2) {\n        return arr1.length === arr2.length && arr1.every((value, index)=>value === arr2[index]);\n    }\n    #getMaxValue(field) {\n        return Math.max(...field.flat());\n    }\n    #isMovePossible(field) {\n        if (field.flat().includes(0)) return true;\n        for(let i = 0; i < field.length; i++){\n            const row = field[i];\n            const column = this.#getColumn(field, i);\n            if (this.#hasEqualPair(row) || this.#hasEqualPair(column)) return true;\n        }\n        return false;\n    }\n    #hasEqualPair(arr) {\n        return arr.some((item, index, array)=>index !== 0 && item === arr[index - 1]);\n    }\n    #updateStatus() {\n        if (this.#isArraysEqual(this.initialState.flat(), this.state.flat()) && this.#isMovePossible(this.state) && this.#getMaxValue(this.state) < 2048) this.#gameStatus = \"idle\";\n        else if (this.#getMaxValue(this.state) >= 2048) this.#gameStatus = \"win\";\n        else if (!this.#isMovePossible(this.state) && this.#getMaxValue(this.state) < 2048) this.#gameStatus = \"lose\";\n        else this.#gameStatus = \"playing\";\n        return this.#gameStatus;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\n// Write your code here\nconst $09e991522ca7e64e$var$btnStart = document.querySelector(\".button.start\");\nconst $09e991522ca7e64e$var$scoreCell = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$fieldCells = document.querySelectorAll(\".field-cell\");\n$09e991522ca7e64e$var$render();\nfunction $09e991522ca7e64e$var$gameStart() {\n    if (!$09e991522ca7e64e$var$btnStart.classList.contains(\"restart\")) {\n        $09e991522ca7e64e$var$game.start();\n        document.addEventListener(\"keydown\", $09e991522ca7e64e$var$keyPush);\n        if ($09e991522ca7e64e$var$game.getStatus() === \"playing\") {\n            $09e991522ca7e64e$var$btnStart.classList.add(\"restart\");\n            $09e991522ca7e64e$var$btnStart.innerHTML = \"Restart\";\n        }\n    } else {\n        document.removeEventListener(\"keydown\", $09e991522ca7e64e$var$keyPush);\n        $09e991522ca7e64e$var$btnStart.innerHTML = \"Start\";\n        $09e991522ca7e64e$var$btnStart.classList.remove(\"restart\");\n        $09e991522ca7e64e$var$game.restart();\n    }\n    $09e991522ca7e64e$var$render();\n}\n$09e991522ca7e64e$var$btnStart.addEventListener(\"click\", $09e991522ca7e64e$var$gameStart);\nfunction $09e991522ca7e64e$var$getClassNumber(element) {\n    const numbsArr = element.className.match(/(\\d+)/g);\n    if (numbsArr) return numbsArr[0];\n    return 0;\n}\nfunction $09e991522ca7e64e$var$showMessage(message) {\n    const messages = document.querySelectorAll(\".message\");\n    for(let i = 0; i < messages.length; i++){\n        const curentMsg = messages[i];\n        if (curentMsg.classList.contains(`message-${message}`)) {\n            if (curentMsg.classList.contains(\"hidden\")) curentMsg.classList.remove(\"hidden\");\n        } else if (!curentMsg.classList.contains(\"hidden\")) curentMsg.classList.add(\"hidden\");\n    }\n}\nfunction $09e991522ca7e64e$var$render() {\n    for(let i = 0; i < $09e991522ca7e64e$var$fieldCells.length; i++){\n        const fieldCell = $09e991522ca7e64e$var$fieldCells[i];\n        const flatState = $09e991522ca7e64e$var$game.getState().flat();\n        const flatStateValue = flatState[i];\n        if (flatStateValue !== +fieldCell.innerHTML) {\n            if (flatStateValue !== 0) fieldCell.innerHTML = String(flatStateValue);\n            else fieldCell.innerHTML = \"\";\n        }\n        if ($09e991522ca7e64e$var$getClassNumber(fieldCell) !== fieldCell.innerHTML) {\n            fieldCell.classList.remove(`field-cell--${$09e991522ca7e64e$var$getClassNumber(fieldCell)}`);\n            fieldCell.classList.add(`field-cell--${flatStateValue}`);\n        }\n    }\n    $09e991522ca7e64e$var$scoreCell.innerHTML = $09e991522ca7e64e$var$game.getScore();\n    switch($09e991522ca7e64e$var$game.getStatus()){\n        case \"win\":\n        case \"lose\":\n            $09e991522ca7e64e$var$showMessage($09e991522ca7e64e$var$game.getStatus());\n            break;\n        case \"idle\":\n            $09e991522ca7e64e$var$showMessage(\"start\");\n            break;\n        case \"playing\":\n            $09e991522ca7e64e$var$showMessage();\n            break;\n    }\n}\nfunction $09e991522ca7e64e$var$keyPush(keyboardEvent) {\n    switch(keyboardEvent.key){\n        case \"ArrowLeft\":\n            $09e991522ca7e64e$var$game.moveLeft();\n            break;\n        case \"ArrowRight\":\n            $09e991522ca7e64e$var$game.moveRight();\n            break;\n        case \"ArrowUp\":\n            $09e991522ca7e64e$var$game.moveUp();\n            break;\n        case \"ArrowDown\":\n            $09e991522ca7e64e$var$game.moveDown();\n            break;\n    }\n    $09e991522ca7e64e$var$render();\n}\n\n\n//# sourceMappingURL=index.509f5c6b.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\n// Write your code here\nconst btnStart = document.querySelector('.button.start');\nconst scoreCell = document.querySelector('.game-score');\nconst fieldCells = document.querySelectorAll('.field-cell');\n\nrender();\n\nfunction gameStart() {\n  if (!btnStart.classList.contains('restart')) {\n    game.start();\n    document.addEventListener('keydown', keyPush);\n\n    if (game.getStatus() === 'playing') {\n      btnStart.classList.add('restart');\n      btnStart.innerHTML = 'Restart';\n    }\n  } else {\n    document.removeEventListener('keydown', keyPush);\n    btnStart.innerHTML = 'Start';\n    btnStart.classList.remove('restart');\n    game.restart();\n  }\n  render();\n}\n\nbtnStart.addEventListener('click', gameStart);\n\nfunction getClassNumber(element) {\n  const numbsArr = element.className.match(/(\\d+)/g);\n\n  if (numbsArr) {\n    return numbsArr[0];\n  }\n\n  return 0;\n}\n\nfunction showMessage(message) {\n  const messages = document.querySelectorAll('.message');\n\n  for (let i = 0; i < messages.length; i++) {\n    const curentMsg = messages[i];\n\n    if (curentMsg.classList.contains(`message-${message}`)) {\n      if (curentMsg.classList.contains('hidden')) {\n        curentMsg.classList.remove('hidden');\n      }\n    } else {\n      if (!curentMsg.classList.contains('hidden')) {\n        curentMsg.classList.add('hidden');\n      }\n    }\n  }\n}\n\nfunction render() {\n  for (let i = 0; i < fieldCells.length; i++) {\n    const fieldCell = fieldCells[i];\n    const flatState = game.getState().flat();\n    const flatStateValue = flatState[i];\n\n    if (flatStateValue !== +fieldCell.innerHTML) {\n      if (flatStateValue !== 0) {\n        fieldCell.innerHTML = String(flatStateValue);\n      } else {\n        fieldCell.innerHTML = '';\n      }\n    }\n\n    if (getClassNumber(fieldCell) !== fieldCell.innerHTML) {\n      fieldCell.classList.remove(`field-cell--${getClassNumber(fieldCell)}`);\n      fieldCell.classList.add(`field-cell--${flatStateValue}`);\n    }\n  }\n  scoreCell.innerHTML = game.getScore();\n\n  switch (game.getStatus()) {\n    case 'win':\n    case 'lose':\n      showMessage(game.getStatus());\n      break;\n    case 'idle':\n      showMessage('start');\n      break;\n    case 'playing':\n      showMessage();\n      break;\n  }\n}\n\nfunction keyPush(keyboardEvent) {\n  switch (keyboardEvent.key) {\n    case 'ArrowLeft':\n      game.moveLeft();\n      break;\n    case 'ArrowRight':\n      game.moveRight();\n      break;\n    case 'ArrowUp':\n      game.moveUp();\n      break;\n    case 'ArrowDown':\n      game.moveDown();\n      break;\n  }\n\n  render();\n}\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  #gameStatus = 'idle';\n  #movingIndikator = [];\n  #score = 0;\n\n  constructor(initialState) {\n    // eslint-disable-next-line no-console\n    this.initialState = initialState || [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n  }\n\n  moveLeft() {\n    for (let i = 0; i < this.state.length; i++) {\n      const curRow = this.state[i];\n      const arr = this.#mergeBackward(this.#groupCells(curRow));\n      let currentMove = false;\n\n      currentMove = !this.#isArraysEqual(curRow, arr);\n      this.#movingIndikator.push(currentMove);\n\n      if (currentMove) {\n        for (let j = 0; j < arr.length; j++) {\n          curRow[j] = arr[j];\n        }\n      }\n    }\n\n    if (this.#movingIndikator.includes(true)) {\n      this.#setValue(this.state);\n      this.#movingIndikator.length = 0;\n    }\n\n    this.#updateStatus();\n  }\n\n  moveRight() {\n    for (let i = 0; i < this.state.length; i++) {\n      const curRow = this.state[i];\n      const arr = this.#mergeForward(this.#groupCells(curRow));\n      let currentMove = false;\n\n      currentMove = !this.#isArraysEqual(curRow, arr);\n      this.#movingIndikator.push(currentMove);\n\n      if (currentMove) {\n        for (let j = 0; j < arr.length; j++) {\n          curRow[j] = arr[j];\n        }\n      }\n    }\n\n    if (this.#movingIndikator.includes(true)) {\n      this.#setValue(this.state);\n      this.#movingIndikator.length = 0;\n    }\n\n    this.#updateStatus();\n  }\n\n  moveUp() {\n    for (let i = 0; i < this.state.length; i++) {\n      const curColumn = this.#getColumn(this.state, i);\n      const arr = this.#mergeBackward(this.#groupCells(curColumn));\n      let currentMove = false;\n\n      currentMove = !this.#isArraysEqual(curColumn, arr);\n      this.#movingIndikator.push(currentMove);\n\n      if (currentMove) {\n        for (let j = 0; j < arr.length; j++) {\n          this.state[j][i] = arr[j];\n        }\n      }\n    }\n\n    if (this.#movingIndikator.includes(true)) {\n      this.#setValue(this.state);\n      this.#movingIndikator.length = 0;\n    }\n\n    this.#updateStatus();\n  }\n\n  moveDown() {\n    for (let i = 0; i < this.state.length; i++) {\n      const curColumn = this.#getColumn(this.state, i);\n      const arr = this.#mergeForward(this.#groupCells(curColumn));\n      let currentMove = false;\n\n      currentMove = !this.#isArraysEqual(curColumn, arr);\n      this.#movingIndikator.push(currentMove);\n\n      if (currentMove) {\n        for (let j = 0; j < arr.length; j++) {\n          this.state[j][i] = arr[j];\n        }\n      }\n    }\n\n    if (this.#movingIndikator.includes(true)) {\n      this.#setValue(this.state);\n      this.#movingIndikator.length = 0;\n    }\n\n    this.#updateStatus();\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.#score;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    return this.state;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    return this.#gameStatus;\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    this.#updateStatus();\n    this.#setValue(this.state);\n    this.#setValue(this.state);\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.#gameStatus = 'idle';\n    this.state = JSON.parse(JSON.stringify(this.initialState));\n    this.#score = 0;\n  }\n\n  // Add your own methods here\n  #getFlatEmptyIndexes(field) {\n    const result = [];\n\n    field.flat().forEach((item, ind, arr) => {\n      if (item === 0) {\n        result.push(ind);\n      }\n    });\n\n    return result;\n  }\n\n  #chooseEmptyRandCoords(field) {\n    const emptyFlatIndexes = this.#getFlatEmptyIndexes(field);\n\n    if (emptyFlatIndexes.length) {\n      const randInd = Math.floor(Math.random() * emptyFlatIndexes.length);\n      const randItem = emptyFlatIndexes[randInd];\n\n      return [Math.floor(randItem / 4), randItem % 4];\n    }\n  }\n\n  #setValue(field) {\n    this.#updateStatus();\n\n    if (this.#gameStatus === 'idle' || this.#gameStatus === 'playing') {\n      const coords = this.#chooseEmptyRandCoords(field);\n      const randNum = Math.floor(1 + Math.random() * 10);\n\n      if (randNum === 1) {\n        field[coords[0]][coords[1]] = 4;\n      } else {\n        field[coords[0]][coords[1]] = 2;\n      }\n    }\n  }\n\n  #groupCells(array) {\n    return array.filter((item, ind, arr) => item !== 0);\n  }\n\n  #getColumn(rowsArr, columnInd) {\n    const column = [];\n\n    for (let i = 0; i < rowsArr.length; i++) {\n      column.push(rowsArr[i][columnInd]);\n    }\n\n    return column;\n  }\n\n  #mergeForward(array) {\n    const arr = array.concat();\n    const result = [];\n\n    for (let i = arr.length - 1; i >= 0; i--) {\n      if (arr[i] === arr[i - 1]) {\n        arr[i] *= 2;\n        this.#score += arr[i];\n        result.push(arr[i]);\n\n        arr.splice(arr.length - 2, 2);\n      } else {\n        result.push(arr.splice(i, 1)[0]);\n      }\n      i = arr.length;\n    }\n\n    if (result.length < 4) {\n      for (let j = result.length; j < 4; j++) {\n        result.push(0);\n      }\n    }\n\n    result.reverse();\n\n    return result;\n  }\n\n  #mergeBackward(array) {\n    const arr = array.concat();\n    const result = [];\n\n    for (let i = 0; i < arr.length; i++) {\n      if (arr[i] === arr[i + 1]) {\n        arr[i] *= 2;\n        this.#score += arr[i];\n        result.push(arr[i]);\n        arr.splice(0, i + 2);\n      } else {\n        result.push(arr.splice(0, 1)[0]);\n      }\n      i -= 1;\n    }\n\n    if (result.length < 4) {\n      for (let j = result.length; j < 4; j++) {\n        result.push(0);\n      }\n    }\n\n    return result;\n  }\n\n  #isArraysEqual(arr1, arr2) {\n    return (\n      arr1.length === arr2.length &&\n      arr1.every((value, index) => value === arr2[index])\n    );\n  }\n\n  #getMaxValue(field) {\n    return Math.max(...field.flat());\n  }\n\n  #isMovePossible(field) {\n    if (field.flat().includes(0)) {\n      return true;\n    }\n\n    for (let i = 0; i < field.length; i++) {\n      const row = field[i];\n      const column = this.#getColumn(field, i);\n\n      if (this.#hasEqualPair(row) || this.#hasEqualPair(column)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  #hasEqualPair(arr) {\n    return arr.some(\n      (item, index, array) => index !== 0 && item === arr[index - 1],\n    );\n  }\n\n  #updateStatus() {\n    if (\n      this.#isArraysEqual(this.initialState.flat(), this.state.flat()) &&\n      this.#isMovePossible(this.state) &&\n      this.#getMaxValue(this.state) < 2048\n    ) {\n      this.#gameStatus = 'idle';\n    } else if (this.#getMaxValue(this.state) >= 2048) {\n      this.#gameStatus = 'win';\n    } else if (\n      !this.#isMovePossible(this.state) &&\n      this.#getMaxValue(this.state) < 2048\n    ) {\n      this.#gameStatus = 'lose';\n    } else {\n      this.#gameStatus = 'playing';\n    }\n\n    return this.#gameStatus;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","state","JSON","parse","stringify","moveLeft","i","length","curRow","arr","currentMove","push","j","includes","moveRight","moveUp","curColumn","moveDown","getScore","getState","getStatus","start","restart","field","result","flat","forEach","item","ind","emptyFlatIndexes","randInd","Math","floor","random","randItem","coords","randNum","array","filter","rowsArr","columnInd","column","concat","splice","reverse","arr1","arr2","every","value","index","max","row","some","$09e991522ca7e64e$var$btnStart","document","querySelector","$09e991522ca7e64e$var$scoreCell","$09e991522ca7e64e$var$fieldCells","querySelectorAll","$09e991522ca7e64e$var$getClassNumber","element","numbsArr","className","match","$09e991522ca7e64e$var$showMessage","message","messages","curentMsg","classList","contains","remove","add","$09e991522ca7e64e$var$render","fieldCell","flatStateValue","flatState","innerHTML","String","$09e991522ca7e64e$var$keyPush","keyboardEvent","key","addEventListener","removeEventListener"],"version":3,"file":"index.509f5c6b.js.map"}